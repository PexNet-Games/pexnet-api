#!/usr/bin/env node

/**
 * üß™ Test de la synchronisation automatique des guilds Discord
 *
 * Ce script teste :
 * - Middleware automatique lors des sessions actives
 * - Middleware critique avant les actions Wordle
 * - Endpoint de synchronisation forc√©e
 * - Int√©gration compl√®te frontend
 */

const API_BASE = process.argv[2] || "http://localhost:3000";
const SESSION_COOKIE = process.argv[3];

console.log("üß™ Test de la synchronisation automatique des guilds Discord");
console.log(`üìç Base URL: ${API_BASE}`);
console.log("");

// Simuler des donn√©es de partie Wordle
const SAMPLE_WORDLE_GAME = {
	word: "PIANO",
	attempts: [
		{ word: "ADIEU", result: ["‚¨õ", "‚¨õ", "üü®", "‚¨õ", "‚¨õ"] },
		{ word: "SALON", result: ["‚¨õ", "üü©", "‚¨õ", "‚¨õ", "üü®"] },
		{ word: "PIANO", result: ["üü©", "üü©", "üü©", "üü©", "üü©"] },
	],
	dailyWordId: "daily-word-test-123",
	won: true,
	attemptsCount: 3,
};

/**
 * Faire une requ√™te HTTP avec gestion d'erreurs
 */
const makeRequest = async (endpoint, options = {}) => {
	const startTime = Date.now();
	const url = `${API_BASE}${endpoint}`;

	const defaultOptions = {
		headers: {
			"Content-Type": "application/json",
			Accept: "application/json",
		},
	};

	if (SESSION_COOKIE) {
		defaultOptions.headers["Cookie"] = SESSION_COOKIE;
	}

	const requestOptions = {
		...defaultOptions,
		...options,
		headers: {
			...defaultOptions.headers,
			...(options.headers || {}),
		},
	};

	try {
		const response = await fetch(url, requestOptions);
		const responseTime = Date.now() - startTime;

		let data;
		try {
			data = await response.json();
		} catch (e) {
			data = { message: "R√©ponse non-JSON" };
		}

		return {
			status: response.status,
			statusText: response.statusText,
			ok: response.ok,
			data,
			responseTime,
		};
	} catch (error) {
		const responseTime = Date.now() - startTime;
		return {
			status: 0,
			statusText: "Network Error",
			ok: false,
			data: { error: error.message },
			responseTime,
		};
	}
};

/**
 * Test des middlewares automatiques
 */
const testAutomaticSyncMiddleware = async () => {
	console.log("üîÑ Test du middleware de synchronisation automatique");
	console.log("============================================================");

	// Test 1: Ping simple qui devrait d√©clencher le middleware automatique
	console.log(
		"\nüì° Test: Requ√™te ping (devrait d√©clencher sync auto en arri√®re-plan)",
	);
	const pingResult = await makeRequest("/api/ping");

	console.log(`‚è±Ô∏è  Temps de r√©ponse: ${pingResult.responseTime}ms`);
	console.log(`üìä Statut HTTP: ${pingResult.status} ${pingResult.statusText}`);

	if (pingResult.ok) {
		console.log("‚úÖ Ping r√©ussi - le middleware automatique a pu s'ex√©cuter");
		console.log(
			"üí° Si vous √™tes connect√©, la sync auto des guilds s'est d√©clench√©e en arri√®re-plan",
		);
	} else {
		console.log("‚ùå Erreur ping:", pingResult.data);
	}

	return pingResult;
};

/**
 * Test de la synchronisation forc√©e
 */
const testForcedSync = async () => {
	console.log("\n‚ö° Test de la synchronisation forc√©e");
	console.log("============================================================");

	const result = await makeRequest("/api/auth/guilds/sync/force", {
		method: "POST",
	});

	console.log(`‚è±Ô∏è  Temps de r√©ponse: ${result.responseTime}ms`);
	console.log(`üìä Statut HTTP: ${result.status} ${result.statusText}`);

	if (result.ok && result.data.success) {
		console.log("‚úÖ SUCC√àS - Synchronisation forc√©e r√©ussie");
		console.log(`   Message: ${result.data.message}`);
		if (result.data.data) {
			console.log(`   Guilds synchronis√©es: ${result.data.data.guildsCount}`);
			console.log(`   Type de sync: ${result.data.data.syncType}`);
			console.log(
				`   Derni√®re sync: ${new Date(result.data.data.lastSync).toLocaleString()}`,
			);
		}
	} else if (result.status === 401) {
		console.log("üîê AUTHENTIFICATION REQUISE");
		console.log(
			"   Vous devez √™tre connect√© via Discord pour forcer une synchronisation",
		);
	} else {
		console.log("‚ùå √âCHEC");
		console.log(
			`   Erreur: ${result.data.message || result.data.error || result.statusText}`,
		);
	}

	return result;
};

/**
 * Test du middleware critique sur soumission Wordle
 */
const testCriticalSyncMiddleware = async () => {
	console.log("\nüéØ Test du middleware critique (soumission Wordle)");
	console.log("============================================================");

	const result = await makeRequest("/api/wordle/submit-game", {
		method: "POST",
		body: JSON.stringify(SAMPLE_WORDLE_GAME),
	});

	console.log(`‚è±Ô∏è  Temps de r√©ponse: ${result.responseTime}ms`);
	console.log(`üìä Statut HTTP: ${result.status} ${result.statusText}`);

	if (result.ok) {
		console.log("‚úÖ SUCC√àS - Soumission Wordle avec sync critique");
		console.log(
			"   üí° Le middleware a v√©rifi√© que les guilds sont √† jour avant traitement",
		);
		if (result.data.success) {
			console.log(`   Message: ${result.data.message || "Partie enregistr√©e"}`);
		}
	} else if (result.status === 401) {
		console.log("üîê AUTHENTIFICATION REQUISE");
		console.log(
			"   Connectez-vous via Discord pour tester les soumissions Wordle",
		);
	} else {
		console.log("‚ùå √âCHEC");
		console.log(
			`   Erreur: ${result.data.message || result.data.error || result.statusText}`,
		);
	}

	return result;
};

/**
 * Test de l'√©tat des guilds apr√®s synchronisation
 */
const testGuildState = async () => {
	console.log("\nüìã Test de l'√©tat des guilds apr√®s synchronisation");
	console.log("============================================================");

	const result = await makeRequest("/api/auth/guilds");

	console.log(`‚è±Ô∏è  Temps de r√©ponse: ${result.responseTime}ms`);
	console.log(`üìä Statut HTTP: ${result.status} ${result.statusText}`);

	if (result.ok && result.data.success) {
		console.log("‚úÖ SUCC√àS - √âtat des guilds r√©cup√©r√©");
		if (result.data.data) {
			console.log(`   Guilds stock√©es: ${result.data.data.guildsCount}`);
			console.log(
				`   Besoin de sync: ${result.data.data.needsSync ? "‚ö†Ô∏è  Oui" : "‚úÖ Non"}`,
			);
			if (result.data.data.lastSync) {
				console.log(
					`   Derni√®re sync: ${new Date(result.data.data.lastSync).toLocaleString()}`,
				);
			} else {
				console.log("   Derni√®re sync: ‚ùå Jamais synchronis√©");
			}
		}
	} else if (result.status === 401) {
		console.log("üîê AUTHENTIFICATION REQUISE");
		console.log("   Connectez-vous via Discord pour voir l'√©tat des guilds");
	} else {
		console.log("‚ùå √âCHEC");
		console.log(
			`   Erreur: ${result.data.message || result.data.error || result.statusText}`,
		);
	}

	return result;
};

/**
 * Test des serveurs communs enrichis
 */
const testEnrichedCommonServers = async () => {
	console.log("\nüåê Test des serveurs communs enrichis");
	console.log("============================================================");

	// Utiliser un ID Discord d'exemple
	const testDiscordId = "224537059308732416"; // Votre ID Discord de test

	const result = await makeRequest(
		`/api/discord/users/${testDiscordId}/common-servers`,
	);

	console.log(`‚è±Ô∏è  Temps de r√©ponse: ${result.responseTime}ms`);
	console.log(`üìä Statut HTTP: ${result.status} ${result.statusText}`);

	if (result.ok && result.data.success) {
		console.log("‚úÖ SUCC√àS - Serveurs communs enrichis");
		console.log(`   Utilisateur: ${result.data.username || "N/A"}`);
		console.log(`   Serveurs communs: ${result.data.totalCommon}`);

		if (result.data.syncInfo) {
			console.log(`   üîÑ Informations de synchronisation:`);
			console.log(
				`     - Derni√®re sync: ${result.data.syncInfo.lastSync ? new Date(result.data.syncInfo.lastSync).toLocaleString() : "Jamais"}`,
			);
			console.log(
				`     - Sync n√©cessaire: ${result.data.syncInfo.needsSync ? "‚ö†Ô∏è  Oui" : "‚úÖ Non"}`,
			);
			console.log(
				`     - Guilds utilisateur: ${result.data.syncInfo.userGuildsCount}`,
			);
		}

		if (result.data.commonServers && result.data.commonServers.length > 0) {
			console.log(`   üéÆ Serveurs Wordle disponibles:`);
			result.data.commonServers.forEach((server) => {
				const wordleStatus = server.wordleChannelId
					? "‚úÖ Configur√©"
					: "‚ö†Ô∏è  Non configur√©";
				console.log(`     - ${server.serverName}: ${wordleStatus}`);
			});
		}
	} else {
		console.log("‚ùå √âCHEC");
		console.log(
			`   Erreur: ${result.data.message || result.data.error || result.statusText}`,
		);
	}

	return result;
};

/**
 * Fonction principale de test
 */
const runAutoSyncTests = async () => {
	try {
		console.log("üöÄ D√©marrage des tests de synchronisation automatique\n");

		if (!SESSION_COOKIE) {
			console.log("‚ö†Ô∏è  ATTENTION: Pas de session fournie");
			console.log("   Certains tests n√©cessitent une authentification Discord");
			console.log(
				"   Usage: node test-auto-guild-sync.js [API_URL] [SESSION_COOKIE]\n",
			);
		}

		const results = {};

		// Test 1: Middleware automatique
		results.autoMiddleware = await testAutomaticSyncMiddleware();

		// Test 2: Synchronisation forc√©e
		results.forceSync = await testForcedSync();

		// Test 3: √âtat des guilds
		results.guildState = await testGuildState();

		// Test 4: Middleware critique
		results.criticalMiddleware = await testCriticalSyncMiddleware();

		// Test 5: Serveurs communs enrichis
		results.commonServers = await testEnrichedCommonServers();

		// R√©sum√© final
		console.log(
			"\n============================================================",
		);
		console.log("üìä R√âSUM√â DES TESTS DE SYNCHRONISATION AUTOMATIQUE");
		console.log("============================================================");

		const testSummary = [
			{ name: "Middleware automatique", result: results.autoMiddleware },
			{ name: "Synchronisation forc√©e", result: results.forceSync },
			{ name: "√âtat des guilds", result: results.guildState },
			{
				name: "Middleware critique Wordle",
				result: results.criticalMiddleware,
			},
			{ name: "Serveurs communs enrichis", result: results.commonServers },
		];

		const successful = testSummary.filter(
			(t) => t.result.ok && t.result.data?.success !== false,
		);
		const authRequired = testSummary.filter((t) => t.result.status === 401);
		const errors = testSummary.filter(
			(t) => !t.result.ok && t.result.status !== 401,
		);

		console.log(`\n‚úÖ Tests r√©ussis (${successful.length}):`);
		successful.forEach((t) =>
			console.log(
				`   ${t.name} (${t.result.status}, ${t.result.responseTime}ms)`,
			),
		);

		if (authRequired.length > 0) {
			console.log(
				`\nüîê Tests n√©cessitant l'authentification (${authRequired.length}):`,
			);
			authRequired.forEach((t) => console.log(`   ${t.name} (401)`));
		}

		if (errors.length > 0) {
			console.log(`\n‚ùå Tests en erreur (${errors.length}):`);
			errors.forEach((t) =>
				console.log(
					`   ${t.name} (${t.result.status}, ${t.result.responseTime}ms)`,
				),
			);
		}

		// Conseils d'utilisation
		console.log("\nüí° CONSEILS D'UTILISATION:");
		console.log(
			"   1. Les guilds se synchronisent automatiquement toutes les 6h",
		);
		console.log(
			"   2. Avant chaque action Wordle critique, une v√©rification est faite (2h)",
		);
		console.log(
			"   3. Utilisez la sync forc√©e si vous rejoignez/quittez des serveurs",
		);
		console.log(
			"   4. Le frontend peut utiliser les exemples d'int√©gration fournis",
		);

		if (authRequired.length > 0 && !SESSION_COOKIE) {
			console.log("\nüîÑ POUR TESTER AVEC AUTHENTIFICATION:");
			console.log(
				"   1. Connectez-vous via http://localhost:3000/api/auth/discord",
			);
			console.log("   2. Copiez le cookie de session depuis les DevTools");
			console.log(
				'   3. Relancez: node test-auto-guild-sync.js http://localhost:3000 "connect.sid=s%3A..."',
			);
		}
	} catch (error) {
		console.error("\n‚ùå ERREUR CRITIQUE lors des tests:", error);
		process.exit(1);
	}
};

// Ex√©cution des tests
runAutoSyncTests();
